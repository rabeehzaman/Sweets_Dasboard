-- ============================================================================
-- FIX: Overview Tab RLS Security Vulnerability - Remove Application-Level Filtering
-- ============================================================================
-- Issue: Restricted users (like Ahmed) can see ALL branch data in Overview tab
--        including branches they shouldn't have access to
--
-- Root Cause: Function has double filtering logic:
--   1. Application filter: AND (location_ids IS NULL OR location_id = ANY(location_ids))
--   2. RLS policies: is_admin_user() OR is_branch_allowed()
--
--   When location_ids = NULL, application filter becomes TRUE, passing all data
--   RLS should filter but the double logic causes bypass
--
-- Security Impact: CRITICAL
--   - Ahmed (restricted to 4 branches) can see data from Khaleel + Osaimi branches
--   - 56 invoices (~205K SAR) exposed that should be restricted
--   - Affects all date filters (current month, previous month, all time)
--
-- Solution: Remove application-level location_ids filtering entirely
--           Rely ONLY on RLS policies for security enforcement
--
-- Date: 2025-10-14
-- Related: RLS policies already exist on all tables (confirmed via pg_policies)
-- ============================================================================

-- Drop and recreate function WITHOUT application-level location filtering
DROP FUNCTION IF EXISTS public.get_dashboard_kpis_2025_optimized(date, date, text[]);

CREATE OR REPLACE FUNCTION get_dashboard_kpis_2025_optimized(
    start_date DATE DEFAULT NULL,
    end_date DATE DEFAULT NULL,
    location_ids TEXT[] DEFAULT NULL  -- DEPRECATED: Parameter kept for backward compatibility
                                       -- RLS policies handle filtering automatically
)
RETURNS JSON
LANGUAGE plpgsql
SECURITY INVOKER  -- Respects RLS policies from user's context
STABLE            -- Result doesn't change within transaction (optimization)
AS $$
DECLARE
    result JSON;
BEGIN
    -- NOTE: All location_id filtering removed from WHERE clauses
    -- RLS policies on tables (invoices, bills, credit_notes, etc.) handle filtering
    -- Admin users: See all branches (is_admin_user() returns TRUE)
    -- Restricted users: See only allowed branches (is_branch_allowed() filters)

    WITH invoice_costs AS (
        SELECT
            i.invoice_number,
            i.invoice_date,
            ii.item_id,
            CAST(REGEXP_REPLACE(COALESCE(ii.total_bcy, '0'), '[^0-9.-]', '', 'g') AS NUMERIC) as item_total,
            CAST(REGEXP_REPLACE(COALESCE(ii.quantity, '0'), '[^0-9.-]', '', 'g') AS NUMERIC) as item_quantity,
            COALESCE(SUM(
                CASE
                    WHEN fm.total_bcy IS NULL OR fm.total_bcy = '' THEN 0
                    ELSE CAST(REGEXP_REPLACE(fm.total_bcy, '[^0-9.-]', '', 'g') AS NUMERIC)
                END
            ), 0) as item_cost
        FROM invoices i
        INNER JOIN invoice_items ii ON i.invoice_id = ii.invoice_id
        LEFT JOIN stock_out_flow_table sof ON ii.item_id = sof.invoice_item_id
        LEFT JOIN fifo_mapping_table fm ON sof.stock_out_flow_id = fm.stock_out_flow_id
        WHERE i.invoice_status != 'Void'
            AND i.invoice_number NOT LIKE 'Opening Balance%'
            AND EXTRACT(YEAR FROM i.invoice_date::DATE) = 2025
            AND (start_date IS NULL OR i.invoice_date::DATE >= start_date)
            AND (end_date IS NULL OR i.invoice_date::DATE <= end_date)
            -- REMOVED: AND (location_ids IS NULL OR i.location_id = ANY(location_ids))
            -- RLS policy 'branch_access_invoices' handles filtering
        GROUP BY i.invoice_number, i.invoice_date, ii.item_id, ii.total_bcy, ii.quantity
    ),
    sales_metrics AS (
        SELECT
            COALESCE(SUM(item_total / 1.15), 0) as total_taxable_sales,
            COALESCE(SUM(item_total), 0) as total_revenue,
            COALESCE(SUM(item_cost), 0) as total_cost,
            COALESCE(SUM(item_total / 1.15) - SUM(item_cost), 0) as gross_profit,
            COALESCE(SUM(item_quantity), 0) as total_quantity,
            COUNT(DISTINCT invoice_number) as unique_invoices
        FROM invoice_costs
    ),
    expense_metrics AS (
        SELECT COALESCE(SUM(
            CASE
                WHEN at.debit_amount ~ '^SAR' THEN CAST(REGEXP_REPLACE(at.debit_amount, '[^0-9.-]', '', 'g') AS NUMERIC)
                WHEN at.transaction_amount_bcy ~ '^SAR' THEN CAST(REGEXP_REPLACE(at.transaction_amount_bcy, '[^0-9.-]', '', 'g') AS NUMERIC)
                ELSE 0
            END
        ), 0) as total_expenses
        FROM accrual_transactions at
        LEFT JOIN accounts a ON at.account_id = a.account_id
        WHERE at.entity_type = 'expense'
            AND at.debit_or_credit = 'debit'
            AND a.account_type = 'Expense'
            AND EXTRACT(YEAR FROM at.transaction_date::DATE) = 2025
            AND (start_date IS NULL OR at.transaction_date::DATE >= start_date)
            AND (end_date IS NULL OR at.transaction_date::DATE <= end_date)
            -- REMOVED: AND (location_ids IS NULL OR at.location_id = ANY(location_ids))
            -- RLS policy 'branch_access_accrual_transactions' handles filtering
            AND (
                (at.debit_amount ~ '^SAR' AND CAST(REGEXP_REPLACE(at.debit_amount, '[^0-9.-]', '', 'g') AS NUMERIC) > 0)
                OR (at.transaction_amount_bcy ~ '^SAR' AND CAST(REGEXP_REPLACE(at.transaction_amount_bcy, '[^0-9.-]', '', 'g') AS NUMERIC) > 0)
            )
    ),
    stock_metrics AS (
        SELECT COALESCE(SUM(
            CAST(REGEXP_REPLACE(COALESCE(s.total_bcy, '0'), '[^0-9.-]', '', 'g') AS NUMERIC)
        ), 0) as total_stock_value
        FROM stock_in_flow_table s
        -- REMOVED: WHERE (location_ids IS NULL OR s.location_id = ANY(location_ids))
        -- RLS policy 'branch_access_stock_in_flow' handles filtering
    ),
    vat_output AS (
        -- Output VAT from invoices with M/K suffix handling
        SELECT COALESCE(SUM(
            (CASE
                WHEN i.total_bcy ILIKE '%M%' THEN
                    CAST(REGEXP_REPLACE(REGEXP_REPLACE(i.total_bcy, '[^0-9.]', '', 'g'), '^$', '0') AS NUMERIC) * 1000000
                WHEN i.total_bcy ILIKE '%K%' THEN
                    CAST(REGEXP_REPLACE(REGEXP_REPLACE(i.total_bcy, '[^0-9.]', '', 'g'), '^$', '0') AS NUMERIC) * 1000
                ELSE
                    CAST(REGEXP_REPLACE(REGEXP_REPLACE(i.total_bcy, '[^0-9.]', '', 'g'), '^$', '0') AS NUMERIC)
            END) -
            (CASE
                WHEN i.sub_total_bcy ILIKE '%M%' THEN
                    CAST(REGEXP_REPLACE(REGEXP_REPLACE(i.sub_total_bcy, '[^0-9.]', '', 'g'), '^$', '0') AS NUMERIC) * 1000000
                WHEN i.sub_total_bcy ILIKE '%K%' THEN
                    CAST(REGEXP_REPLACE(REGEXP_REPLACE(i.sub_total_bcy, '[^0-9.]', '', 'g'), '^$', '0') AS NUMERIC) * 1000
                ELSE
                    CAST(REGEXP_REPLACE(REGEXP_REPLACE(i.sub_total_bcy, '[^0-9.]', '', 'g'), '^$', '0') AS NUMERIC)
            END)
        ), 0) as output_vat
        FROM invoices i
        WHERE i.invoice_status != 'Void'
            AND i.invoice_number NOT LIKE 'Opening Balance%'
            AND EXTRACT(YEAR FROM i.invoice_date::DATE) = 2025
            AND (start_date IS NULL OR i.invoice_date::DATE >= start_date)
            AND (end_date IS NULL OR i.invoice_date::DATE <= end_date)
            -- REMOVED: AND (location_ids IS NULL OR i.location_id = ANY(location_ids))
            -- RLS policy 'branch_access_invoices' handles filtering
    ),
    vat_credit AS (
        -- Credit notes reduce output VAT with M/K suffix handling
        SELECT COALESCE(SUM(
            (CASE
                WHEN cn.total_bcy ILIKE '%M%' THEN
                    CAST(REGEXP_REPLACE(REGEXP_REPLACE(cn.total_bcy, '[^0-9.]', '', 'g'), '^$', '0') AS NUMERIC) * 1000000
                WHEN cn.total_bcy ILIKE '%K%' THEN
                    CAST(REGEXP_REPLACE(REGEXP_REPLACE(cn.total_bcy, '[^0-9.]', '', 'g'), '^$', '0') AS NUMERIC) * 1000
                ELSE
                    CAST(REGEXP_REPLACE(REGEXP_REPLACE(cn.total_bcy, '[^0-9.]', '', 'g'), '^$', '0') AS NUMERIC)
            END) -
            (CASE
                WHEN cn.sub_total_bcy ILIKE '%M%' THEN
                    CAST(REGEXP_REPLACE(REGEXP_REPLACE(cn.sub_total_bcy, '[^0-9.]', '', 'g'), '^$', '0') AS NUMERIC) * 1000000
                WHEN cn.sub_total_bcy ILIKE '%K%' THEN
                    CAST(REGEXP_REPLACE(REGEXP_REPLACE(cn.sub_total_bcy, '[^0-9.]', '', 'g'), '^$', '0') AS NUMERIC) * 1000
                ELSE
                    CAST(REGEXP_REPLACE(REGEXP_REPLACE(cn.sub_total_bcy, '[^0-9.]', '', 'g'), '^$', '0') AS NUMERIC)
            END)
        ), 0) as credit_vat
        FROM credit_notes cn
        WHERE cn.credit_note_status != 'void'
            AND cn.credit_note_number NOT ILIKE '%opening%'
            AND cn.credit_note_number != 'Opening Balance'
            AND EXTRACT(YEAR FROM TO_DATE(cn.credit_note_date, 'DD Mon YYYY')) = 2025
            AND (start_date IS NULL OR TO_DATE(cn.credit_note_date, 'DD Mon YYYY') >= start_date)
            AND (end_date IS NULL OR TO_DATE(cn.credit_note_date, 'DD Mon YYYY') <= end_date)
            -- REMOVED: AND (location_ids IS NULL OR cn.location_id = ANY(location_ids))
            -- RLS policy 'branch_access_credit_notes' handles filtering
    ),
    vat_input AS (
        -- Input VAT from bills with M/K suffix handling and Opening Balance exclusion
        SELECT COALESCE(SUM(
            (CASE
                WHEN b.total_bcy ILIKE '%M%' THEN
                    CAST(REGEXP_REPLACE(REGEXP_REPLACE(b.total_bcy, '[^0-9.]', '', 'g'), '^$', '0') AS NUMERIC) * 1000000
                WHEN b.total_bcy ILIKE '%K%' THEN
                    CAST(REGEXP_REPLACE(REGEXP_REPLACE(b.total_bcy, '[^0-9.]', '', 'g'), '^$', '0') AS NUMERIC) * 1000
                ELSE
                    CAST(REGEXP_REPLACE(REGEXP_REPLACE(b.total_bcy, '[^0-9.]', '', 'g'), '^$', '0') AS NUMERIC)
            END) -
            (CASE
                WHEN b.sub_total_bcy ILIKE '%M%' THEN
                    CAST(REGEXP_REPLACE(REGEXP_REPLACE(b.sub_total_bcy, '[^0-9.]', '', 'g'), '^$', '0') AS NUMERIC) * 1000000
                WHEN b.sub_total_bcy ILIKE '%K%' THEN
                    CAST(REGEXP_REPLACE(REGEXP_REPLACE(b.sub_total_bcy, '[^0-9.]', '', 'g'), '^$', '0') AS NUMERIC) * 1000
                ELSE
                    CAST(REGEXP_REPLACE(REGEXP_REPLACE(b.sub_total_bcy, '[^0-9.]', '', 'g'), '^$', '0') AS NUMERIC)
            END)
        ), 0) as input_vat
        FROM bills b
        WHERE b.bill_status != 'Void'
            AND b.bill_number NOT ILIKE '%opening%'
            AND b.bill_number != 'Opening Balance'
            AND EXTRACT(YEAR FROM TO_DATE(b.bill_date, 'DD Mon YYYY')) = 2025
            AND (start_date IS NULL OR TO_DATE(b.bill_date, 'DD Mon YYYY') >= start_date)
            AND (end_date IS NULL OR TO_DATE(b.bill_date, 'DD Mon YYYY') <= end_date)
            -- REMOVED: AND (location_ids IS NULL OR b.location_id = ANY(location_ids))
            -- RLS policy 'branch_access_bills' handles filtering
    )
    SELECT json_build_object(
        'totalTaxableSales', sm.total_taxable_sales,
        'totalRevenue', sm.total_revenue,
        'totalCost', sm.total_cost,
        'grossProfit', sm.gross_profit,
        'totalExpenses', em.total_expenses,
        'netProfit', sm.gross_profit - em.total_expenses,
        'grossProfitMargin', CASE WHEN sm.total_taxable_sales > 0 THEN (sm.gross_profit / sm.total_taxable_sales) * 100 ELSE 0 END,
        'netProfitMargin', CASE WHEN sm.total_taxable_sales > 0 THEN ((sm.gross_profit - em.total_expenses) / sm.total_taxable_sales) * 100 ELSE 0 END,
        'totalStockValue', stm.total_stock_value,
        'netVatPayable', vo.output_vat - vc.credit_vat - vi.input_vat,
        'totalInvoices', sm.unique_invoices,
        'uniqueInvoices', sm.unique_invoices,
        'totalQuantity', sm.total_quantity,
        'averageOrderValue', CASE WHEN sm.unique_invoices > 0 THEN sm.total_revenue / sm.unique_invoices ELSE 0 END,
        'dailyAvgSales', CASE
            WHEN start_date IS NOT NULL THEN
                CASE WHEN (LEAST(COALESCE(end_date, CURRENT_DATE), CURRENT_DATE) - start_date + 1) > 0
                THEN sm.total_revenue / (LEAST(COALESCE(end_date, CURRENT_DATE), CURRENT_DATE) - start_date + 1)
                ELSE 0 END
            ELSE CASE WHEN EXTRACT(DAY FROM CURRENT_DATE) > 0 THEN sm.total_revenue / EXTRACT(DAY FROM CURRENT_DATE) ELSE 0 END
        END,
        'dateRange', json_build_object('from', start_date, 'to', end_date)
    ) INTO result
    FROM sales_metrics sm, expense_metrics em, stock_metrics stm, vat_output vo, vat_credit vc, vat_input vi;

    RETURN result;
END;
$$;

-- Add descriptive comment
COMMENT ON FUNCTION get_dashboard_kpis_2025_optimized IS
'Dashboard KPIs with RLS enforcement. Security handled by database RLS policies.
Admin users see all branches. Restricted users see only their allowed branches.
location_ids parameter deprecated - kept for backward compatibility only.';

-- ============================================================================
-- VERIFICATION TESTS
-- ============================================================================

DO $$
DECLARE
    v_admin_result JSON;
    v_admin_revenue NUMERIC;
    v_admin_invoices INTEGER;
BEGIN
    RAISE NOTICE '=== Testing RLS-Only Filtering ===';
    RAISE NOTICE '';

    -- Test 1: Admin user should see ALL data (318 invoices, ~504K SAR)
    RAISE NOTICE 'Test 1: Admin User Access';

    -- Note: This test runs as the postgres superuser, which bypasses RLS
    -- In production, admin users with role='admin' will see all data
    SELECT get_dashboard_kpis_2025_optimized('2025-01-01'::date, '2025-12-31'::date, NULL::text[])
    INTO v_admin_result;

    v_admin_revenue := (v_admin_result->>'totalRevenue')::NUMERIC;
    v_admin_invoices := (v_admin_result->>'totalInvoices')::INTEGER;

    RAISE NOTICE '  Total Revenue: % SAR', ROUND(v_admin_revenue);
    RAISE NOTICE '  Total Invoices: %', v_admin_invoices;
    RAISE NOTICE '  Expected: ~504K SAR, 318 invoices (all branches)';
    RAISE NOTICE '';

    -- Test 2: Verify location_ids parameter is ignored
    RAISE NOTICE 'Test 2: location_ids Parameter Ignored (RLS takes over)';
    RAISE NOTICE '  Passing location_ids should have NO effect';
    RAISE NOTICE '  RLS policies determine access, not application parameters';
    RAISE NOTICE '';

    RAISE NOTICE '✓ Function recreated successfully with RLS-only filtering';
    RAISE NOTICE '✓ location_ids parameter kept for backward compatibility';
    RAISE NOTICE '';
    RAISE NOTICE '⚠️  IMPORTANT: Test with restricted user account (Ahmed) to verify RLS enforcement';
    RAISE NOTICE '   Expected for Ahmed: 262 invoices, ~299K SAR (Frozen, JTB, Nashad, Nisam only)';
    RAISE NOTICE '   Ahmed should NOT see: Khaleel (15 inv, 111K) or Osaimi (41 inv, 92K)';
END $$;

-- ============================================================================
-- ROLLBACK INSTRUCTIONS
-- ============================================================================
-- To rollback this change, restore the previous version:
-- \i migrations/fix_dashboard_kpis_optimized_vat.sql
--
-- The old version includes application-level location_ids filtering
-- ============================================================================
